#!/usr/bin/env bash
set -euo pipefail

echo "===== INÍCIO DO DEBUG DE AMBIENTE =====" >&2
printenv >&2
echo "===== FIM DO DEBUG DE AMBIENTE =====" >&2

echo "===== INÍCIO DO DEBUG DE AMBIENTE ENV CNB =====" >&2
echo ">>> CNB_* vars:" >&2
printenv | grep -E '^CNB_|^PLATFORM_' | sort >&2
echo "===== FIM DO DEBUG DE AMBIENTE ENV CNB =====" >&2

# Captura possíveis argumentos legacy ou modernos
ARG1=${1:-}; ARG2=${2:-}; ARG3=${3:-}; ARG4=${4:-}

# Descobre layers_dir de forma genérica
if [ -n "${CNB_LAYERS_DIR:-}" ]; then
  LAYERS_DIR="$CNB_LAYERS_DIR"
elif [ -d "$ARG2/env" ] && [ -d "$ARG3/env" ]; then
  LAYERS_DIR="$ARG2"
else
  LAYERS_DIR="$ARG3"
fi

# Define a layer corretamente (sem subpastas extras)
SSH_LAYER_DIR="$LAYERS_DIR/com.smartfit.ssh-key"

# Cria pasta .ssh dentro da layer
mkdir -p "$SSH_LAYER_DIR/.ssh"
chmod 700 "$SSH_LAYER_DIR/.ssh"

# Verifica variável de chave
: "${BUILDPACK_SSH_KEY:?Erro: BUILDPACK_SSH_KEY não definida}"

# Salva a chave e ajusta permissão
echo "$BUILDPACK_SSH_KEY" > "$SSH_LAYER_DIR/.ssh/id_rsa"
chmod 600 "$SSH_LAYER_DIR/.ssh/id_rsa"

# Popula known_hosts
ssh-keyscan github.com >> "$SSH_LAYER_DIR/.ssh/known_hosts"

# Gera o arquivo de env no nível da layer
cat <<EOF > "$LAYERS_DIR/com.smartfit.ssh-key.env"
GIT_SSH_COMMAND=ssh -i "$SSH_LAYER_DIR/.ssh/id_rsa" -o StrictHostKeyChecking=no
EOF

# Gera o metadata no nível da layer
cat <<EOF > "$LAYERS_DIR/com.smartfit.ssh-key.toml"
[types]
build = true
launch = false
EOF
