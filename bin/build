#!/usr/bin/env bash
set -euo pipefail

echo ">> SSH key prefix: ${BUILDPACK_SSH_KEY:0:20}..." >&2

# Parâmetros brutos
ARG1=${1:-}
ARG2=${2:-}
ARG3=${3:-}
ARG4=${4:-}

# Determina diretório correto de layers
if [ -n "${CNB_LAYERS_DIR:-}" ]; then
  LAYERS_DIR="$CNB_LAYERS_DIR"
elif [ -d "$ARG2/env" ] && [ -d "$ARG3/env" ]; then
  # legacy: $2=layers, $3=env
  LAYERS_DIR="$ARG2"
  ENV_DIR="$ARG3"
else
  # new: $2=platform, $3=layers, $4=env
  LAYERS_DIR="$ARG3"
  ENV_DIR="$ARG4"
fi

SSH_LAYER_DIR="$LAYERS_DIR/com.smartfit.ssh-key/ssh-key"
mkdir -p "$SSH_LAYER_DIR/.ssh"
chmod 700 "$SSH_LAYER_DIR/.ssh"

if [ -z "${BUILDPACK_SSH_KEY:-}" ]; then
  echo "Erro: A variável BUILDPACK_SSH_KEY não está definida."
  exit 1
fi

echo "$BUILDPACK_SSH_KEY" > "$SSH_LAYER_DIR/.ssh/id_rsa"
chmod 600 "$SSH_LAYER_DIR/.ssh/id_rsa"

ssh-keyscan github.com >> "$SSH_LAYER_DIR/.ssh/known_hosts"

cat <<EOF_LAYER > "$SSH_LAYER_DIR.env"
GIT_SSH_COMMAND=ssh -i "$SSH_LAYER_DIR/.ssh/id_rsa" -o StrictHostKeyChecking=no
EOF_LAYER

cat <<EOF_META > "$SSH_LAYER_DIR.toml"
[types]
build = true
launch = false
EOF_META
